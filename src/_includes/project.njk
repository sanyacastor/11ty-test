---
title: Sam Hopkins | Projects {{ project.title}}
layout: base.njk
---

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
<script src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js"></script>

<body>

  <!--to pass to summary-card.njk-->
  {% set card_data = { 
    data: {
      targetUrl: project.url,
      title: title,
      dates: dates,
      collaborators: collaborators,
      cardDescription: cardDescription,
      relatedProjects: relatedProjects
    }
  } %}

  {%-set related_projects_data = {
    relatedProjects: relatedProjects
  } %}

  <!--link rel="stylesheet" href="bundle.css"-->
  <article>
    <div class='container'>
      <div class="projectView_container">
        <div class="projectView_sideBar">
          <div class="projectView_cardSlot">
            {% include 'summary-card.njk'  %}
          </div>
          <div class="projectView_photoSlot" id = 'projectView_photoSlot'>
            <div class="swiper mySwiper">
              <div class="swiper-wrapper" id="projectView_swiperWrapper">
                {% for project in projects %}
                  {% if project.title === title %}
                    {% for image in project.images %}
                      <div class="swiper-slide" caption="{{image.caption}}">
                        {% image image.url, image.alt %}
                      </div>
                    {%endfor%}
                  {%endif%}
                {%endfor%}
              </div>
              <!--div class="swiper-button-next"></div>
              <div class="swiper-button-prev"></div-->
              <div class="swiper-pagination"></div>
            </div>
          </div>
          <p class="projectView_photo_caption" id="projectView_photo_caption">
            This is another one photo.
          <p>
        </div>
        <div class="projectView_blockText">
          <div id="projectView_outer">
            <div class="projectView_ScrollArticle" id="scrollArticle">
              <!--scrollable main text content-->
              <div class="hackColumn" id="firstHackColumn"></div>
              {{content | safe}}
              <div class="projectView_phantomColumn" id="previewPhantomColumn"> <!--!!!PELIGRO!!! column width--></div>
              <div class="hackColumn" id="lastHackColumn"></div>
              <!--/scrollable main text content-->
          </div>
        </div>
      </div>
        <div class="projectView_navigation" id="projectView_scrollNavBar"></div>
    </div> <!--container-->
    <div>
      {% include 'relatedAndMoreCards.njk' %}
    </div>
    
  </article>

    <script>
      document.addEventListener("DOMContentLoaded", (event) => { /* gsap code */});
    </script>

    <script src="/_scripts/windowController.js"></script>

    <script>
      let checkpoints;
      let current_checkpoint_index = 0;
      let windowColumnsPerPage = 1;
      let windowColumnWidth = 416;
      let windowScrollStep = 0.01;
      let windowScrollStepPercent = 1;
      let windowtargetScrollFraction = 0;
      let windownumberOfColumns = 1;
      let isAnimating = false;

      var windowControllerInstance;

      const hscrollContent = document.querySelector('.projectView_ScrollArticle');
      const hscrollOuter = document.querySelector('projectView_outer');

      const scrollNextCheckpoint = () => {
        if(isAnimating == true)
          return;

        current_checkpoint_index = Math.floor(current_checkpoint_index);

        current_checkpoint_index++;
        if(current_checkpoint_index >= checkpoints.length)
          current_checkpoint_index = checkpoints.length-1;

        setScrollFraction(checkpoints[current_checkpoint_index]);
      }

      const scrollPrevCheckpoint = () => {
        if(isAnimating == true)
          return;

        current_checkpoint_index = Math.ceil(current_checkpoint_index);

        current_checkpoint_index--;
        if(current_checkpoint_index < 0)
          current_checkpoint_index = 0;
        setScrollFraction(checkpoints[current_checkpoint_index]);
      }
      const scrollStep = (pages) =>{
        frac = windowtargetScrollFraction;
        frac = Math.min(1, frac + pages*windowScrollStepPercent / 100);
        frac = Math.max(0, frac);

        setScrollFraction(frac);
      }
      function getClosestCheckpointIndex(fraction){
        let closest = checkpoints.reduce((prev, curr) => Math.abs(curr - fraction) < Math.abs(prev - fraction) ? curr : prev);
        return checkpoints.indexOf(closest);
      }
      function selectCurrentCheckpoint(){
        for (let i = 0; i < checkpoints.length; i++) {
          document.getElementById('navButton'+i).classList.remove('active');
        }
        document.getElementById('navButton'+current_checkpoint_index).classList.add('active');
      }

      const setScrollFraction = (newFrac) => {
        current_checkpoint_index = getClosestCheckpointIndex(newFrac);
        newFrac = checkpoints[current_checkpoint_index];
        selectCurrentCheckpoint();

        newFrac = Math.max(0, Math.min(newFrac, 1));
        
        swipeImageToFraction(newFrac);

        windowtargetScrollFraction = newFrac;
        updateSlug(newFrac);

        scrollTwineStart(newFrac);
      }

      function updateSlug(newFrac){
        history.replaceState(null, null, "?persent=" + newFrac * 100);
      }

      function scrollTwineStart(newFrac){
        if(isAnimating){
          return;
        }

        let columnGap = parseInt(getComputedStyle(hscrollContent).columnGap);

        gsap.to(  document.getElementById('projectView_outer'),{
                    scrollLeft: newFrac * (document.getElementById('projectView_outer').scrollWidth + columnGap/2),
                    duration: 0.5, ease: "power2.inOut",
                    onComplete: () => {
                      isAnimating = false;
                    }
                });
        isAnimating = true;
      }

      function processImages() {
        str = hscrollContent.innerHTML;

        let images = [];
        let regex = /<img\s+src="([^"]+)"\s+alt="([^"]+)"/g;

        const imgCollection = document.getElementsByTagName('img');
        for (let item of imgCollection) {
          images.push({src: item.src, alt: item.alt, title: item.title});
        }

        addCaptionsToImages(imgCollection);
        swiper.update();
      }

      function addCaptionsToImages(imgCollection){
        for (let item of imgCollection) {
          item.insertAdjacentHTML('afterend', `<p class="projectView_imgCaptionMobile">${item.title}</p>`);
        }
      }

      function subscribeToFullscreen(){
        const mySwiperElement = document.querySelector('.mySwiper');

        if (mySwiperElement) {
          mySwiperElement.addEventListener('click', function(event) {
            /* ignore clicks ontop of the navigation buttons */
            if (event.target.classList.contains('swiper-button-next')) {
              return;
            }
            if (event.target.classList.contains('swiper-button-prev')) {
              return;
            }

            console.log("Switching_fullscreen!!!");
            switch_fullscreen();
            //previewImageSwiperInstance.switch_fullscreen();
          });


          document.addEventListener("keydown", function(event) {
            if (event.key === "Escape") {
              mySwiperElement.classList.remove("fullscreen");
            }
          });

        }
      }

          
      let fullscreen = false;
      function switch_fullscreen() {
        let swiperElement = document.querySelector('.mySwiper');

        if(swiperElement.classList.contains("fullscreen")){
          fullscreen = false;
          swiperElement.classList.remove("fullscreen");
        } else {
          fullscreen = true;
          swiperElement.classList.add("fullscreen");
        }
      }

      //==============Callbacks================
      window.addEventListener('load', function() {   
        subscribeToFullscreen();

        isAnimating = false;
        
        windowControllerInstance = new windowController();
        let isMobileVersion = windowControllerInstance.itisMobile();
        console.log("isMobile: " + isMobileVersion);

        processImages();

        onResize();
        processSlug();
        //window.history.pushState({"html":html,"pageTitle":"fdsfsdf"},"", "somePath");
      });
      
      window.addEventListener('resize', function() {
        console.log("onresize");

        onResize();
      });

      // Prevent default window scroll only when mouse is over swiper or projectView_outer
      window.addEventListener("wheel", function(e) {
        if(windowControllerInstance.itisMobile()){
          return;
        }

        if (isDescendantOfSwiperOrOuter(e.target)) {
            e.preventDefault();
        }
      }, { passive: false });

      function isDescendantOfSwiperOrOuter(element) {
          // Check if the element or any of its ancestors is swiper or projectView_outer
          while (element !== null && element.id !== 'projectView_swiperWrapper' && element.id !== 'projectView_outer') {
              element = element.parentElement;
          }
          // If the loop ended without finding swiper or projectView_outer, it means the element is not a descendant
          return element !== null;
      }
      
      document.getElementById('projectView_outer').addEventListener('wheel', function (e) {
        if(windowControllerInstance.itisMobile()){
          return;
        }

        if(isAnimating)
          return;

        var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;

          if(delta > 0){
            scrollPrevCheckpoint();
          } else {
            scrollNextCheckpoint();
          }
      }, false);

      document.getElementById('projectView_swiperWrapper').addEventListener('wheel', function(e) {
        if(windowControllerInstance.itisMobile()){
          return;
        }
        
        var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;

        if(delta > 0){
          swiper.slidePrev();
        } else {
          swiper.slideNext();
        }
      });

      document.addEventListener('keydown', function(e) { 
        if (e.keyCode === 37) {
          if(isAnimating)
            return;

          scrollPrevCheckpoint();
        } else if (e.keyCode === 39) {
          if(isAnimating)
            return;

          scrollNextCheckpoint();
        }
      });
      //=============/Callbacks================

      function hidePhantomColumn() {
        document.getElementById('previewPhantomColumn').style.display = 'none';
      }

      function showPhantomColumn() {
        document.getElementById('previewPhantomColumn').style.display = 'block';
      }

      function updatePhantomColumn() {
        if(windowColumnsPerPage == 1){
          hidePhantomColumn();
          return;
        }

        if (windownumberOfColumns % 2 === 0) {
          hidePhantomColumn();
        } else {
          showPhantomColumn();
          windownumberOfColumns = windownumberOfColumns+1;
        }

        if(windownumberOfColumns < 1 || windowColumnsPerPage > 2){
          console.log("Error: windownumberOfColumns < 1 || windowColumnsPerPage > 2 " + windownumberOfColumns + " " + windowColumnsPerPage);
        }
      }

      function recalcColumnsPerPage() {
        var projectViewOuter = document.getElementById('projectView_outer');
        var elementWidth = projectViewOuter.offsetWidth;
        windowColumnsPerPage = parseInt( elementWidth/(416+15) ); //!!!PELIGRO!!! wrong magic numbers, parseint

        if(windowColumnsPerPage > 1){
          windowColumnsPerPage = 2;
        }
        else{
          windowColumnsPerPage = 1;
        }
      }

      function recalcColumnWidth() {
        if(windowColumnsPerPage == 2){
          windowColumnWidth = 416; //!!!PELIGRO!!! magic numbers
          hscrollContent.style.columnWidth = windowColumnWidth + 'px';
          return;  
        }
        
        var projectViewOuter = document.getElementById('projectView_outer');
        var elementWidth = projectViewOuter.offsetWidth;
        windowColumnWidth = elementWidth-40;//!!!PELIGRO!!! magic numbers

        hscrollContent.style.columnWidth = windowColumnWidth + 'px';
      }
      function recalcNumberOfColumns() {
        hidePhantomColumn();
        windownumberOfColumns = getNumberOfColumns_dirtiest_way_ever();
        updatePhantomColumn();
        windownumberOfColumns = getNumberOfColumns_dirtiest_way_ever();
      }

      function getNumberOfColumns_dirtiest_way_ever() {
        //cycle through all elements and increment counter
        //What the fuck wrong with me?!
        let ncols = 1;
        let rightmost = document.getElementById('firstHackColumn').getBoundingClientRect().left;
        let hackColumnWidth = document.getElementById('firstHackColumn').offsetWidth;
        
        //get all elements
        let elements = hscrollContent.children;

        for (let i = 0; i < elements.length; i++) {
          let element = elements[i];
          let rect = element.getBoundingClientRect();

          let columns_inside = Math.floor((rect.left - rightmost)/hackColumnWidth);

          if(columns_inside > 0){
            rightmost = rect.left;
            ncols += columns_inside;
          }
        }

        ncols = Math.floor(ncols);
        return ncols;
      }

      function recalcScrollStep() {
        windowScrollStep = 1/windownumberOfColumns;
        windowScrollStepPercent = 100 / windownumberOfColumns;
      }

      function recalcScrollCheckpoints() {
        if(windowColumnsPerPage == 0){
          console.log("windowColumnsPerPage == 0");
          return;
        }

        numberOfCheckpoints = windownumberOfColumns/windowColumnsPerPage;
        numberOfCheckpoints = Math.ceil(numberOfCheckpoints);

        checkpoints = [];

        for (let i = numberOfCheckpoints-1; i >= 0; i--) {
          targetPersent = parseFloat((  (i*windowColumnsPerPage) * 100 / windownumberOfColumns).toFixed(2));
          checkpoints.unshift(targetPersent/100);
        }
      }

      function redrawNavButtons() {
        document.getElementById('projectView_scrollNavBar').innerHTML = '';
        newNav = '';

        numberOfButtons = windownumberOfColumns/windowColumnsPerPage;
        numberOfButtons = Math.ceil(numberOfButtons);

        newNav += createNavNextButton();

        for(let i=checkpoints.length-1; i >= 0 ; i--)
          newNav += createNavButton(i, checkpoints[i]);

        //newNav += createNavPrevButton();//is absent in the design

        document.getElementById('projectView_scrollNavBar').innerHTML = newNav;
        document.getElementById('navButton0').classList.add('active');
      }

      function createNavPrevButton() {
        return '<button class="navigation-button left-button nav-arrow-project-view", id="navButtonScrollToPrevCheckpoint", onclick="scrollPrevCheckpoint()"></button>';
      }
      function createNavNextButton() {
        return '<button class="navigation-button right-button nav-arrow-project-view" id="navButtonScrollToNextCheckpoint", onclick="scrollNextCheckpoint()"></button>';
      }
      function createNavButton(n, checkp) {
        return `<button class="projectView_navigationDigit"
                             id="navButton${n}"
                             targetPersent="${checkp}"
                             targetCheckpoint="${n}"
                             onclick="navDigitClicked(${checkp})">
                             ${n}
                    </button>`;
      }

      function attractScrollToNearestColumn() {
        //processSlug();
      }

      function navDigitClicked(persent) {
        isAnimating = false;
        setScrollFraction(persent);
      }
 
      function onResize() {
        recalcColumnsPerPage();
        recalcColumnWidth();
        recalcNumberOfColumns();
        recalcScrollStep();

        recalcScrollCheckpoints();
        redrawNavButtons();
        attractScrollToNearestColumn();

        showHideNavPanel();        
        updateImageCaption();
      }

      function showHideNavPanel() {
        let numberOfPages = windownumberOfColumns/windowColumnsPerPage;

        console.log("number of pages: " + numberOfPages);

        if(numberOfPages <= 1){
          document.getElementById('projectView_scrollNavBar').style.display = 'none';
        }else{
          document.getElementById('projectView_scrollNavBar').style.display = 'block';
        }
      }

      function processSlug() {
        // Get the current URL
        var currentUrl = window.location.href;
        var slug = currentUrl.substring(currentUrl.lastIndexOf('/') + 1);

        var parameter = slug.split('=')[1];
        if (typeof parameter === 'undefined') {
          parameter = 0;
        }

        frac = parseFloat(parameter) / 100;
        
        columnNumber = parseInt(frac/windowScrollStep);
        newPosition = columnNumber*windowScrollStep;

        setScrollFraction(newPosition);
      }
    </script>

  <!-- Swiper JS -->
  <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
  
  <!-- Initialize Image Swiper -->
  <script>
    const swiper = new Swiper(".mySwiper", {
      slidesPerView: 1,
      pagination: {
        el: ".swiper-pagination",
        type: "custom"
      },
      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev"
      },
      onSlideChangeEnd: function(swiper){
        console.log("slide changed");
      }                
    });
    swiper.on('slideChange', function() {
      updateImageCaption();
    });

    function updateImageCaption() {

      console.log("isMobileVerison: " + windowControllerInstance.itisMobile());

      if(swiper.slides.length == 0 || windowControllerInstance.itisMobile() == true){
        document.getElementById('projectView_photoSlot').style["display"] = "none";
        document.getElementById('projectView_photo_caption').style["display"] = "none";
        return;
      }else{
        document.getElementById('projectView_photoSlot').style["display"] = "block";
        document.getElementById('projectView_photo_caption').style["display"] = "block";
      }

      var captionElement = document.getElementById('projectView_photo_caption');

      let activeSlide = swiper.slides[swiper.activeIndex];
      if (activeSlide) {
        let captionText = activeSlide.getAttribute("caption");
        console.log(captionText);  // This will log "Some caption2"
        captionElement.innerHTML = captionText;
      }
      else
        captionElement.innerHTML = "";
    }

    function swipeImageToFraction(persent) {
      nSlides = swiper.slides.length;

      if(nSlides == 0)
        return;

      targetSlideNumber = parseInt(nSlides * persent);

      swiper.slideTo(targetSlideNumber);
    }

</script>


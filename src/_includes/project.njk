---
title: Sam Hopkins | Projects {{ project.title}}
layout: base.njk
---

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
<script src="https://cdn.jsdelivr.net/npm/gsap@3.12.5/dist/gsap.min.js"></script>

<body>
  {% set project = {
      data: {
          title: title,
          dates: dates,
          collaborators: collaborators,
          cardDescription: cardDescription
      }
  } %}
    <!--link rel="stylesheet" href="bundle.css"-->
  <article>
    <div class='container'>
      <div class="projectView_container">
        <div class="projectView_sideBar">
          <div class="projectView_cardSlot">
            {% include 'summary-card.njk'  %}
          </div>
          <div class="projectView_photoSlot">
            <div class="swiper mySwiper">
              <div class="swiper-wrapper" id="projectView_swiperWrapper">
              </div>
              <div class="swiper-button-next"></div>
              <div class="swiper-button-prev"></div>
              <div class="swiper-pagination"></div>
            </div>
          </div>
        </div>
        <div class="projectView_blockText">
          <div id="projectView_outer">
            <div class="projectView_ScrollArticle" id="scrollArticle">
              <!--scrollable main text content-->
              <div class="hackColumn" id="firstHackColumn"></div>
              {{content | safe}}
              <div class="projectView_phantomColumn" id="previewPhantomColumn"> <!--!!!PELIGRO!!! column width--></div>
              <div class="hackColumn" id="lastHackColumn"></div>
              <!--/scrollable main text content-->
          </div>
        </div>
        </div>

        <div class="projectView_navigation" id="projectView_scrollNavBar">
            0 1 2 3 4
        <div>
      </div>
    </div>
  </article>

    <script>
      document.addEventListener("DOMContentLoaded", (event) => { /* gsap code */});
    </script>

    <script>
      let checkpoints;
      let current_checkpoint_index = 0;
      let windowColumnsPerPage = 1;
      let windowColumnWidth = 416;

      const hscrollContent = document.querySelector('.projectView_ScrollArticle');
      const hscrollOuter = document.querySelector('projectView_outer');

      /*deprecated*/ const scrollStepRight = () => {scrollStep(windowColumnsPerPage);}
      /*deprecated*/ const scrollStepLeft = () => {scrollStep(-1*windowColumnsPerPage);}

      const scrollNextCheckpoint = () => {
        current_checkpoint_index++;
        if(current_checkpoint_index >= checkpoints.length)
          current_checkpoint_index = checkpoints.length-1;

        setScrollFraction(checkpoints[current_checkpoint_index]);
      }
      const scrollPrevCheckpoint = () => {
        current_checkpoint_index--;
        if(current_checkpoint_index < 0)
          current_checkpoint_index = 0;
        setScrollFraction(checkpoints[current_checkpoint_index]);
      }
      const scrollStep = (pages) =>{
        console.log("scrollStep( " + parseInt( pages ) + ")");

        frac = window.targetScrollFraction;
        frac = Math.min(1, frac + pages*window.scrollStepPercent / 100);
        frac = Math.max(0, frac);

        setScrollFraction(frac);
      }
      function getClosestCheckpointIndex(fraction){
        let closest = checkpoints.reduce((prev, curr) => Math.abs(curr - fraction) < Math.abs(prev - fraction) ? curr : prev);
        return checkpoints.indexOf(closest);
      }
      function selectCurrentCheckpoint(){
        for (let i = 0; i < checkpoints.length; i++) {
          document.getElementById('navButton'+i).classList.remove('active');
        }
        document.getElementById('navButton'+current_checkpoint_index).classList.add('active');
      }

      const setScrollFraction = (newFrac) => {
        current_checkpoint_index = getClosestCheckpointIndex(newFrac);
        newFrac = checkpoints[current_checkpoint_index];
        selectCurrentCheckpoint();

        newFrac = Math.max(0, Math.min(newFrac, 1));
        
        swipeImageToFraction(newFrac);

        window.targetScrollFraction = newFrac;
        updateSlug(newFrac);

        scrollTwineStart(newFrac);
        //document.getElementById('projectView_outer').scrollLeft = newFrac * document.getElementById('projectView_outer').scrollWidth;
      }

      function updateSlug(newFrac){
        history.replaceState(null, null, "?persent=" + newFrac * 100);
      }

      function scrollTwineStart(newFrac){
        let columnGap = parseInt(getComputedStyle(hscrollContent).columnGap);
        gsap.to(  document.getElementById('projectView_outer'),{
                    scrollLeft: newFrac * (document.getElementById('projectView_outer').scrollWidth+columnGap),
                    duration: 0.5, ease: "power2.inOut"
                });
      }

      function getListOfImages() {
        str = hscrollContent.innerHTML;

        console.log(str)

        let images = [];
        let regex = /<img\s+src="([^"]+)"\s+alt="([^"]+)"/g;
        const imgCollection = document.getElementsByTagName('img');
        for (let item of imgCollection) {
          console.log('src :', item.src)
          console.log('alt :', item.alt)
          images.push({src: item.src, alt: item.alt});
        }

        //put images into swiper-wrapper
        let swiperWrapper = document.getElementById('projectView_swiperWrapper');
        swiperWrapper.innerHTML = '';
        images.forEach(image => {
          swiperWrapper.innerHTML += `<div class="swiper-slide">
                                        <img src="${image.src}" alt="${image.alt}" class="swiper-slide">
                                      </div>`;
        }); 
        swiper.update();
      }

      //==============Callbacks================
      window.addEventListener('load', function() {
        console.log("get list of images")
        getListOfImages();
        console.log("/get list of images")

        onResize();
        processSlug();
        //window.history.pushState({"html":html,"pageTitle":"fdsfsdf"},"", "somePath");
      });
      window.addEventListener('resize', function() {
        onResize();
      });
      document.getElementById('projectView_outer').addEventListener('wheel', function (e) {
          var delta = e.wheelDelta ? e.wheelDelta : -e.deltaY;

          if(delta > 0){
            scrollPrevCheckpoint(); //scrollStepLeft();
          } else {
            scrollNextCheckpoint(); //scrollStepRight();
          }
      }, false);
      document.getElementById('projectView_outer').addEventListener('keydown', function(e) {
        if (e.keyCode === 37) {
          scrollPrevCheckpoint();
        } else
        if (e.keyCode === 39) {
          scrollNextCheckpoint();
        }
      });
      //=============/Callbacks================


      function hidePhantomColumn(){
        document.getElementById('previewPhantomColumn').style.display = 'none';
      }
      function showPhantomColumn(){
        document.getElementById('previewPhantomColumn').style.display = 'block';
      }
      function updatePhantomColumn(){
        if(windowColumnsPerPage == 1){
          hidePhantomColumn();
          return;
        }

        if (window.numberOfColumns % 2 === 0) {
          hidePhantomColumn();
        } else {
          showPhantomColumn();
          window.numberOfColumns = window.numberOfColumns+1;
        }

        if(window.numberOfColumns < 1 || windowColumnsPerPage > 2){
          console.log("Error: window.numberOfColumns < 1 || windowColumnsPerPage > 2 " + window.numberOfColumns + " " + windowColumnsPerPage);
        }
      }

      function recalcColumnsPerPage(){
        var projectViewOuter = document.getElementById('projectView_outer');
        var elementWidth = projectViewOuter.offsetWidth;
        windowColumnsPerPage = parseInt( elementWidth/(416+15) ); //!!!PELIGRO!!! wrong magic numbers, parseint

        if(windowColumnsPerPage > 1){
          windowColumnsPerPage = 2;
        }
        else{
          windowColumnsPerPage = 1;
        }
      }
      function recalcColumnWidth(){
        if(windowColumnsPerPage == 2){
          windowColumnWidth = 416; //!!!PELIGRO!!! magic numbers
          hscrollContent.style.columnWidth = windowColumnWidth + 'px';
          return;  
        }
        
        var projectViewOuter = document.getElementById('projectView_outer');
        var elementWidth = projectViewOuter.offsetWidth;
        windowColumnWidth = elementWidth-60;//!!!PELIGRO!!! magic numbers

        hscrollContent.style.columnWidth = windowColumnWidth + 'px';
      }
      function recalcNumberOfColumns(){
        hidePhantomColumn();
        window.numberOfColumns = getNumberOfColumns_dirtiest_way_ever();
        updatePhantomColumn();
        window.numberOfColumns = getNumberOfColumns_dirtiest_way_ever();
      }
      function getNumberOfColumns_dirtiest_way_ever(){
        //cycle through all elements and increment counter
        //What the fuck wrong with me?!
        let ncols = 1;
        let rightmost = document.getElementById('firstHackColumn').getBoundingClientRect().left;
        //get all elements
        let elements = hscrollContent.children;

        for (let i = 0; i < elements.length; i++) {
          let element = elements[i];
          let rect = element.getBoundingClientRect();
          console.log("element pos: " + rect.left);
          if (rect.left > rightmost + 100) {
            rightmost = rect.left;
            ncols++;
          }
        }

        ncols = Math.floor(ncols);
        return ncols;
      }

      function getNumberOfColumnsDepr(){
        let columnGap = parseInt(getComputedStyle(hscrollContent).columnGap);
        console.log("---->}>}>}>columnGap: " + columnGap);

        firstHackColumn = document.getElementById('firstHackColumn');
        lastHackColumn = document.getElementById('lastHackColumn');
        firstPositionLeft = firstHackColumn.getBoundingClientRect().left;
        firstTotalWidth = firstHackColumn.getBoundingClientRect().width;
        lastPositionLeft = lastHackColumn.getBoundingClientRect().left;

        marginLeft = 30;
        if(windowColumnsPerPage == 2)
          marginLeft = 0;//firstHackColumn.style.marginLeft;

        marginRight = firstHackColumn.style.marginRight;

        console.log("firstPositionLeft: " + firstPositionLeft
                     + " lastPositionLeft: " + lastPositionLeft
                     + " firstTotalWidth: " + firstTotalWidth
                     + " marginLeft: " + marginLeft
                     + " marginRight: " + marginRight
                     + " width/(colWidth + gap)" + (lastPositionLeft - firstPositionLeft) / (windowColumnWidth+columnGap+ marginLeft + marginRight ));

        ret = 1+(lastPositionLeft - firstPositionLeft) / (windowColumnWidth+columnGap+ marginLeft+ marginRight); 
        console.log("getNumberOfColumns: " + ret);
        return ret;
      }

      function recalcScrollStep(){
        window.scrollStep = 1/numberOfColumns;
        window.scrollStepPercent = 100 / numberOfColumns;
      }

      function recalcScrollCheckpoints(){
        if(windowColumnsPerPage == 0){
          console.log("windowColumnsPerPage == 0");
          return;
        }

        numberOfCheckpoints = window.numberOfColumns/windowColumnsPerPage;
        numberOfCheckpoints = Math.ceil(numberOfCheckpoints);

        checkpoints = [];

        for (let i = numberOfCheckpoints-1; i >= 0; i--) {
          targetPersent = parseFloat((  (i*windowColumnsPerPage) * 100 / window.numberOfColumns).toFixed(2));
          checkpoints.unshift(targetPersent/100);
        }
      }

      function redrawNavButtons(){
        document.getElementById('projectView_scrollNavBar').innerHTML = '';
        newNav = '';

        numberOfButtons = window.numberOfColumns/windowColumnsPerPage;
        numberOfButtons = Math.ceil(numberOfButtons);

        newNav += createNavNextButton();

        for(let i=checkpoints.length-1; i >= 0 ; i--)
          newNav += createNavButton(i, checkpoints[i]);

        document.getElementById('projectView_scrollNavBar').innerHTML = newNav;
        document.getElementById('navButton0').classList.add('active');
      }

      function createNavNextButton(){
        return `<button class="projectView_navigationButtonNextCheckpoint"
                           id="navButtonScrollToNextCheckpoint"
                           onclick="scrollNextCheckpoint()">
                           >>
                  </button>`;
      }
      function createNavButton(n, checkp){
        return `<button class="projectView_navigationDigit"
                             id="navButton${n}"
                             targetPersent="${checkp}"
                             targetCheckpoint="${n}"
                             onclick="setScrollFraction(${checkp})">
                             ${n}
                    </button>`;
      }

      function attractScrollToNearestColumn(){
        //processSlug();
      }
 
      function onResize() {
        recalcColumnsPerPage();
        recalcColumnWidth();
        recalcNumberOfColumns();
        recalcScrollStep();

        recalcScrollCheckpoints();
        redrawNavButtons();
        attractScrollToNearestColumn();
      }

      function processSlug(){
        // Get the current URL
        var currentUrl = window.location.href;
        var slug = currentUrl.substring(currentUrl.lastIndexOf('/') + 1);

        var parameter = slug.split('=')[1];
        if (typeof parameter === 'undefined') {
          parameter = 0;
        }

        frac = parseFloat(parameter) / 100;
        
        columnNumber = parseInt(frac/window.scrollStep);
        newPosition = columnNumber*window.scrollStep;

        setScrollFraction(newPosition);
      }
    </script>

  <!-- Swiper JS -->
  <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
  
  <!-- Initialize Image Swiper -->
  <script>
    const swiper = new Swiper(".mySwiper", {
      slidesPerView: 1,
      pagination: {
        el: ".swiper-pagination",
        type: "progressbar"
      },
      navigation: {
        nextEl: ".swiper-button-next",
        prevEl: ".swiper-button-prev"
      }
    });

    function swipeImageToFraction(persent){
      nSlides = swiper.slides.length;

      if(nSlides == 0)
        return;

      targetSlideNumber = parseInt(nSlides * persent);

      swiper.slideTo(targetSlideNumber);
    }
  </script>